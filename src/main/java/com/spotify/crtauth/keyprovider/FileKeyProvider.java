/*
 * Copyright (c) 2014 Spotify AB.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package com.spotify.crtauth.keyprovider;

import com.google.common.base.Charsets;
import com.google.common.io.Files;
import com.spotify.crtauth.exceptions.KeyNotFoundException;
import com.spotify.crtauth.utils.TraditionalKeyParser;

import java.io.File;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPublicKeySpec;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * This {@code KeyProvider} fetches keys from a local path. The file name of each public key file
 * is assumed to be in the format $username_id_rsa.pub, and keys are assumed to be stored in
 * PKCS1, PEM format, as generated by default by ssh-keygen.
 */
public class FileKeyProvider implements KeyProvider {
  private static final String KEYFILE_PATTERN = "%s_id_rsa.pub";
  private static final String KEY_ALGORITHM = "RSA";
  private final File keyRootDir;

  /**
   * Construct a key provider that fetches keys from a local path.
   * @param keyRootDir Path to directory where all keys are located.
   */
  public FileKeyProvider(File keyRootDir) {
    checkArgument(keyRootDir.exists(), "The root directory for ssh keys doesn't exist.");
    checkArgument(keyRootDir.isDirectory(), "The root directory for ssh keys is actually not a " +
        "directory.");
    this.keyRootDir = keyRootDir;
  }

  @Override
  public RSAPublicKey getKey(String username) throws KeyNotFoundException {
    String filename = String.format(KEYFILE_PATTERN, username);
    KeyFactory keyFactory;
    try {
      keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
    } catch (NoSuchAlgorithmException e) {
      throw new RuntimeException(e);
    }
    File keyFile = new File(keyRootDir, filename);
    try {
      byte[] keyBytes = Files.toByteArray(keyFile);
      String keyString = new String(keyBytes, Charsets.US_ASCII);
      RSAPublicKeySpec publicKeySpec = TraditionalKeyParser.parsePemPublicKey(keyString);
      return (RSAPublicKey) keyFactory.generatePublic(publicKeySpec);
    } catch (Exception e) {
      throw new KeyNotFoundException(e);
    }
  }
}
